{"version":3,"file":"extract-date.js","names":["createDateParser","parser","chrono","en","GB","clone","certainYearRefiner","_","results","filteredResults","forEach","result","start","isCertain","get","push","refiners","refine","monthNameRegexp","prepareText","text","replace","RegExp","extractEarliest","values","minFound","value","date","extractFirst","length","extractDateFromText","options","type","preparedText","dates","getAllDatesFromText","toISOString","slice","parse"],"sources":["../../lib/extract-date.ts"],"sourcesContent":["import * as chrono from 'chrono-node'\nimport {ParsingContext} from 'chrono-node/dist/chrono'\nimport {ParsingResult} from 'chrono-node/dist/results'\n\nfunction createDateParser() {\n  const parser = chrono.en.GB.clone()\n\n  function certainYearRefiner(_: ParsingContext, results: ParsingResult[]) {\n    // If there is no AM/PM (meridiem) specified,\n    //  let all time between 1:00 - 4:00 be PM (13.00 - 16.00)\n    const filteredResults: ParsingResult[] = []\n    results.forEach(result => {\n      if (\n        result.start.isCertain('day') &&\n        result.start.isCertain('month') &&\n        result.start.isCertain('year') &&\n        // Weird bug in chrono 2016-06-18\n        result.start.get('day') !== 0\n      ) {\n        filteredResults.push(result)\n      }\n    })\n\n    return filteredResults\n  }\n\n  parser.refiners.push({\n    refine: certainYearRefiner,\n  })\n\n  return parser\n}\n\nfunction monthNameRegexp() {\n  return (\n    'Jan(?:uary|\\\\.)?|Feb(?:ruary|\\\\.)?|Mar(?:ch|\\\\.)?|Apr(?:il|\\\\.)?|May|Jun(?:e|\\\\.)?|Jul(?:y|\\\\.)?|Aug(?:ust|\\\\.)?|Sep(?:tember|\\\\.)?|Oct(?:ober|\\\\.)?|Nov(?:ember|\\\\.)?|Dec(?:ember|\\\\.)?' +\n    '|' +\n    'Ene(?:ro|\\\\.)?|Feb(?:rero|\\\\.)?|Mar(?:zo|\\\\.)?|Abr(?:il|\\\\.)?|May(?:o|\\\\.)?|Jun(?:io|\\\\.)?|Jul(?:io|\\\\.)?|Ago(?:sto|\\\\.)?|Sep(?:tiembre|\\\\.)?|Oct(?:ubre|\\\\.)?|Nov(?:iembre|\\\\.)?|Dic(?:iembre|\\\\.)?'\n  )\n}\n\nfunction prepareText(text: string) {\n  return (\n    text\n      // Incorrectly scanned hyphens\n      .replace(/[\\u2013\\u2014\\u2012\\uFE58/]{1}/gi, '-')\n      // Incorrectly scanned dd/mm/yyyy date, e.g. dd\\'mm\\'yyyy\n      // Example: 01\\'01\\'2016 -> 01/01/2016\n      .replace(\n        new RegExp(\n          '(^|\\\\s)' +\n            // (d)d?(?)\n            '(?:([0-3]{0,1}[0-9]{1})[^a-z0-9]{1,2})' +\n            // (m)m?(?)\n            '(?:([0-3]{0,1}[0-9]{1})[^a-z0-9]{1,2})' +\n            // yyyy\n            '([1-9]{1}[0-9]{3})' +\n            '(?=$|\\\\s)',\n          'ig',\n        ),\n        '$1$2/$3/$4',\n      )\n      // Incorrect format MMM dd yyyy\n      // Example: Jan01 2016 -> Jan 01 2016\n      .replace(\n        new RegExp(\n          `(^|\\\\s)` +\n            // monthname?\n            `(?:(${monthNameRegexp()})[^a-z0-9]{0,2})` +\n            // (d)d?(?)\n            `(?:(` +\n            `[0-3]{0,1}[0-9]{1}` +\n            `)[^a-z0-9]{1,2})` +\n            // yyyy\n            `([1-9]{1}[0-9]{3})` +\n            `(?=$|\\\\s)`,\n          'ig',\n        ),\n        '$1$2 $3 $4',\n      )\n      // Incorrect format dd MMM yyyy\n      // Example: 01Jan 2016 -> 01 Jan 2016\n      .replace(\n        new RegExp(\n          `(^|\\\\s)` +\n            // (d)d?(?)\n            `(?:(` +\n            `[0-3]{0,1}[0-9]{1}` +\n            `)[^a-z0-9]{1,2})` +\n            // monthname?\n            `(?:(${monthNameRegexp()})[^a-z0-9]{1,2})` +\n            // yyyy\n            `([1-9]{1}[0-9]{3})` +\n            `(?=$|\\\\s)`,\n          'ig',\n        ),\n        '$1$2 $3 $4',\n      )\n      // Incorrectly scanned ..Thh;ii;ss\n      // Example: T12;45;59 -> T12:45:59\n      .replace(\n        new RegExp(\n          // Thh\n          'T([0-1][0-9]|2[0-4])' +\n            // seperator\n            '[^a-z0-9]{1}' +\n            // ii\n            '([0-5][0-9])' +\n            // seperator\n            '[^a-z0-9]{1}' +\n            // ss\n            '([0-5][0-9])' +\n            '(?=$|\\\\s)',\n          'ig',\n        ),\n        'T$1:$2:$3',\n      )\n  )\n}\n\nfunction extractEarliest(values: chrono.ParsedResult[]) {\n  let minFound: Date | undefined\n\n  values.forEach(value => {\n    if (!minFound || value.start.date() < minFound) {\n      minFound = value.start.date()\n    }\n  })\n\n  return minFound\n}\n\nfunction extractFirst(values: chrono.ParsedResult[]) {\n  if (values.length > 0) {\n    return values[0].start.date()\n  }\n}\n\ntype ExtractType = 'earliest' | 'first'\n\nfunction extractDateFromText(text: string, options?: {type?: ExtractType}) {\n  const {type = 'earliest'} = options ?? {}\n  const preparedText = prepareText(text)\n  const dates = getAllDatesFromText(preparedText)\n\n  let result: Date | undefined\n\n  if (type === 'earliest') {\n    result = extractEarliest(dates)\n  } else {\n    result = extractFirst(dates)\n  }\n\n  if (!result) {\n    return null\n  }\n\n  return result.toISOString().slice(0, 10)\n}\n\nfunction getAllDatesFromText(text: string) {\n  return createDateParser().parse(text)\n}\n\nexport {extractDateFromText, getAllDatesFromText, type ExtractType}\n"],"mappings":"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"}